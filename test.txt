# test_auth.py
import pytest
from httpx import AsyncClient
from main import app
import main  # for patching
import jwt
from unittest.mock import patch

SECRET_KEY = "mysecretkey"


@pytest.mark.asyncio
@patch("main.get_user_from_db")
@patch("main.ldap_authenticate")
async def test_login_success(mock_ldap, mock_db):
    mock_db.return_value = {"username": "johndoe"}
    mock_ldap.return_value = True

    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.post("/login", json={
            "username": "johndoe",
            "password": "secret123"
        })

    assert response.status_code == 200
    data = response.json()
    assert "access_token" in data
    decoded = jwt.decode(data["access_token"], SECRET_KEY, algorithms=["HS256"])
    assert decoded["sub"] == "johndoe"


@pytest.mark.asyncio
@patch("main.get_user_from_db")
async def test_login_user_not_found(mock_db):
    mock_db.return_value = None

    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.post("/login", json={
            "username": "invaliduser",
            "password": "whatever"
        })

    assert response.status_code == 404
    assert response.json()["detail"] == "User not found"


@pytest.mark.asyncio
@patch("main.get_user_from_db")
@patch("main.ldap_authenticate")
async def test_login_invalid_password(mock_ldap, mock_db):
    mock_db.return_value = {"username": "johndoe"}
    mock_ldap.return_value = False

    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.post("/login", json={
            "username": "johndoe",
            "password": "wrongpass"
        })

    assert response.status_code == 401
    assert response.json()["detail"] == "Invalid credentials"
