# test_auth_logic.py
import pytest
from unittest.mock import patch, MagicMock
from main import login, get_profile, LoginRequest, HTTPException


def test_login_logic_success():
    with patch("main.get_user_from_db") as mock_db, patch("main.ldap_authenticate") as mock_ldap, patch("main.create_jwt_token") as mock_jwt:
        mock_db.return_value = {"username": "johndoe"}
        mock_ldap.return_value = True
        mock_jwt.return_value = "mocked-jwt-token"

        req = LoginRequest(username="johndoe", password="secret123")
        result = login(req)

        assert result["access_token"] == "mocked-jwt-token"


def test_login_logic_user_not_found():
    with patch("main.get_user_from_db") as mock_db:
        mock_db.return_value = None

        req = LoginRequest(username="nouser", password="secret123")
        with pytest.raises(HTTPException) as exc:
            login(req)

        assert exc.value.status_code == 404
        assert exc.value.detail == "User not found"


def test_login_logic_invalid_password():
    with patch("main.get_user_from_db") as mock_db, patch("main.ldap_authenticate") as mock_ldap:
        mock_db.return_value = {"username": "johndoe"}
        mock_ldap.return_value = False

        req = LoginRequest(username="johndoe", password="wrongpass")
        with pytest.raises(HTTPException) as exc:
            login(req)

        assert exc.value.status_code == 401
        assert exc.value.detail == "Invalid credentials"


def test_get_profile_success():
    fake_payload = {"sub": "johndoe"}
    # Call directly with mock payload
    result = get_profile(payload=fake_payload)
    assert result["username"] == "johndoe"
    assert result["role"] == "user"


def test_get_profile_invalid_token():
    with patch("main.jwt.decode", side_effect=Exception("invalid token")):
        from fastapi.security import HTTPAuthorizationCredentials
        from main import verify_jwt_token

        # Simulate FastAPI's credential object
        credentials = HTTPAuthorizationCredentials(scheme="Bearer", credentials="invalidtoken")

        with pytest.raises(HTTPException) as exc:
            verify_jwt_token(credentials)

        assert exc.value.status_code == 403
        assert exc.value.detail == "Invalid token"
